import uuid
from typing import Any
from uuid import uuid4

from pydantic import BaseModel, create_model

"""
data-related utility functions
"""


def str_uuid() -> str:
    """
    generate a unique id

    :return: a string generated by uuid4 algorithm
    """
    return str(uuid4())


def is_uuid(obj: Any) -> bool:
    try:
        uuid.UUID(obj)
        return True
    except ValueError:
        return False


def get_provenance_model(pydantic_model: type[BaseModel],
                         provenance_model_name: str,
                         exclude_fields: tuple[str, ...] = ('identifier',)):
    """
    given a base pydantic model, for each field in the base model, this function creates a new pydantic model
    with an additional string field named describing the provenance of the base model's field

    provenance__<field_name>
    """
    old_model_keys = sorted(pydantic_model.model_fields.keys())
    provenance_fields = {'provenance__' + k: (str, None) for k in old_model_keys if k not in exclude_fields}

    new_model = create_model(
        provenance_model_name, **provenance_fields,
        __base__=pydantic_model,
    )
    return new_model
